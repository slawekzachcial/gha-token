name: Release

on:
  workflow_dispatch:

jobs:

  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name : Setup test
      run: 'echo "$PRIVATE_KEY" > gha-token-test.private-key.pem'
      shell: bash
      env:
        PRIVATE_KEY: ${{secrets.PRIVATE_KEY}}

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Lint
      uses: golangci/golangci-lint-action@v2

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Get Release Version from CHANGELOG
      id: get-release-version
      run: |
        RELEASE_VERSION="$(cat CHANGELOG.md | grep '^## \[[0-9]' | head -n1 | sed -e 's/^.*\[//' -e 's/\].*$//')"
        echo "Release Version in CHANGELOG: ${RELEASE_VERSION}"
        [ -n "${RELEASE_VERSION}" ]
        echo "::set-output name=RELEASE_VERSION::${RELEASE_VERSION}"

    - name: Get Release Notes from CHANGELOG
      id: get-release-notes
      run: |
        RELEASE_NOTES="$(cat CHANGELOG.md | awk 'BEGIN {st=0} /^## \[[0-9]/ {st++; next} st==1 {print $0}')"
        RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
        echo "::set-output name=RELEASE_NOTES::${RELEASE_NOTES}"

    - name: Ensure Release Tag Does Not Exist
      run: '! git rev-parse -q --verify "refs/tags/${{ steps.get-release-version.outputs.RELEASE_VERSION }}" >/dev/null'

    - name: Create Release Artifacts
      run: |
        mkdir -p build/darwin build/linux
        GOOS=linux GOARCH=amd64 go build -o build/linux/gha-token
        tar -z -c -C build/linux -f build/gha-token_${{ steps.get-release-version.outputs.RELEASE_VERSION }}_linux_amd64.tar.gz gha-token
        GOOS=linux GOARCH=arm64 go build -o build/linux/gha-token
        tar -z -c -C build/linux -f build/gha-token_${{ steps.get-release-version.outputs.RELEASE_VERSION }}_linux_arm64.tar.gz gha-token
        GOOS=darwin GOARCH=amd64 go build -o build/darwin/gha-token
        tar -z -c -C build/darwin -f build/gha-token_${{ steps.get-release-version.outputs.RELEASE_VERSION }}_darwin_amd64.tar.gz gha-token
        GOOS=darwin GOARCH=arm64 go build -o build/darwin/gha-token
        tar -z -c -C build/darwin -f build/gha-token_${{ steps.get-release-version.outputs.RELEASE_VERSION }}_darwin_arm64.tar.gz gha-token

    - name: Create Release Tag
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/${{ steps.get-release-version.outputs.RELEASE_VERSION }}",
            sha: context.sha
          })

    - name: Publish Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/*.tar.gz"
        name: "${{ steps.get-release-version.outputs.RELEASE_VERSION }}"
        body: "${{ steps.get-release-notes.outputs.RELEASE_NOTES }}"
        tag: "${{ steps.get-release-version.outputs.RELEASE_VERSION }}"
        token: ${{ secrets.GITHUB_TOKEN }}
